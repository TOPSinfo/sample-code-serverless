service: spot-me-lambdas-user-service

plugins:
  - serverless-webpack

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: "../../webpack.config.js" # Name of webpack configuration file
    includeModules: false # Node modules configuration for packaging
    packager: "yarn" # Packager that will be used to package your external modules
  package:
    individually: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1
  apiGateway:
    restApiId:
      "Fn::ImportValue": ${self:custom.stage}-ApiGatewayRestApiId
    restApiRootResourceId:
      "Fn::ImportValue": ${self:custom.stage}-ApiGatewayRestApiRootResourceId
  iamRoleStatements:
    - Effect: Allow
      Action:
        - sns:*
        - ses:SendEmail
        - ses:SendRawEmail
        - s3:Upload
      "Resource": "*"
  environment:
    stage: ${self:custom.stage}
functions:
  getUserProfile:
    handler: handler.getUserProfile
    events:
      - http:
          path: /user/get-profile/{userId}
          method: get
          cors: true
  updateUserProfile:
    handler: handler.updateUserProfile
    events:
      - http:
          path: /user/update-profile
          method: post
          cors: true
  updateLastVisitedScreen:
    handler: handler.updateLastVisitedScreen
    events:
      - http:
          path: /user/update-last-screen
          method: post
          cors: true
  deleteUser:
    handler: handler.deleteUser
    events:
      - http:
          path: /user/{userId}
          method: delete
          cors: true
