service: spot-me-lambdas-apiGateway

plugins:
  - serverless-webpack
  - serverless-domain-manager

custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  webpack:
    webpackConfig: "../webpack.config.js" # Name of webpack configuration file
    includeModules: false # Node modules configuration for packaging
    packager: "yarn" # Packager that will be used to package your external modules
  domains:
    prod: sample-prod.com
    dev: sample-dev.com
  customDomain:
    domainName: ${self:custom.domains.${self:custom.stage}}
    stage: "${self:custom.stage}"
    basePath: "api"
    certificateArn: "arn:aws:acm:us-east-1:662030201051:certificate/6ac7f4eb-5968-443f-ac7e-6c7511f1fdce"
    createRoute53Record: false
  package:
    individually: true

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1

functions:
  sampleCode:
    handler: handler.sampleCode
    events:
      - http:
          path: /sampleCode
          method: get
          cors: true
resources:
  Resources:
    GatewayResponse:
      Type: "AWS::ApiGateway::GatewayResponse"
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: EXPIRED_TOKEN
        RestApiId:
          Ref: "ApiGatewayRestApi"
        StatusCode: "401"
  Outputs:
    ApiGatewayRestApiId:
      Value:
        Ref: ApiGatewayRestApi
      Export:
        Name: ${self:custom.stage}-ApiGatewayRestApiId

    ApiGatewayRestApiRootResourceId:
      Value:
        Fn::GetAtt:
          - ApiGatewayRestApi
          - RootResourceId
      Export:
        Name: ${self:custom.stage}-ApiGatewayRestApiRootResourceId
